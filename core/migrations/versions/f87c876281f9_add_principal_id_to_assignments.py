# """Add principal_id to assignments

# Revision ID: f87c876281f9
# Revises: 52a401750a76
# Create Date: 2024-10-03 23:11:16.669334

# """
# from alembic import op
# import sqlalchemy as sa


# # revision identifiers, used by Alembic.
# revision = 'f87c876281f9'
# down_revision = '52a401750a76'
# branch_labels = None
# depends_on = None


# def upgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.add_column('assignments', sa.Column('principal_id', sa.Integer(), nullable=False, server_default='1'))
#     op.alter_column('assignments', 'state',
#                existing_type=sa.VARCHAR(length=9),
#                nullable=False)
#     op.create_foreign_key('fk_assignments_principal_id', 'assignments', 'principals', ['principal_id'], ['id'])
#     # ### end Alembic commands ###


# def downgrade():
#     # ### commands auto generated by Alembic - please adjust! ###
#     op.drop_constraint('fk_assignments_principal_id', 'assignments', type_='foreignkey')
#     op.alter_column('assignments', 'state',
#                existing_type=sa.VARCHAR(length=9),
#                nullable=True)
#     op.drop_column('assignments', 'principal_id')
#     # ### end Alembic commands ###














# from alembic import op
# import sqlalchemy as sa
# from sqlalchemy import inspect

# # revision identifiers, used by Alembic.
# revision = 'f87c876281f9'
# down_revision = '52a401750a76'
# branch_labels = None
# depends_on = None

# def upgrade():
#     # Get the current connection
#     conn = op.get_bind()
    
#     # Check if the principal_id column already exists
#     inspector = inspect(conn)
#     columns = [col['name'] for col in inspector.get_columns('assignments')]
    
#     if 'principal_id' in columns:
#         # Rename the existing column
#         op.alter_column('assignments', 'principal_id', new_column_name='old_principal_id')

#     # Add the new principal_id column
#     op.add_column('assignments', sa.Column('principal_id', sa.Integer(), nullable=False, server_default='1'))
#     op.create_foreign_key('fk_assignments_principal_id', 'assignments', 'principals', ['principal_id'], ['id'])

#     # Alter the existing 'state' column to be non-nullable
#     op.alter_column('assignments', 'state',
#                     existing_type=sa.VARCHAR(length=9),
#                     nullable=False)

# def downgrade():
#     # Drop the foreign key constraint if it exists
#     op.drop_constraint('fk_assignments_principal_id', 'assignments', type_='foreignkey')
#     op.drop_column('assignments', 'principal_id')
    
#     # Check if old_principal_id exists and drop it if needed
#     conn = op.get_bind()
#     inspector = inspect(conn)
#     columns = [col['name'] for col in inspector.get_columns('assignments')]
    
#     if 'old_principal_id' in columns:
#         op.drop_column('assignments', 'old_principal_id')
    
#     op.alter_column('assignments', 'state',
#                     existing_type=sa.VARCHAR(length=9),
#                     nullable=True)












# """Add principal_id to assignments

# Revision ID: f87c876281f9
# Revises: 52a401750a76
# Create Date: 2024-10-03 23:11:16.669334

# """
# from alembic import op
# import sqlalchemy as sa


# # revision identifiers, used by Alembic.
# revision = 'f87c876281f9'
# down_revision = '52a401750a76'
# branch_labels = None
# depends_on = None


# def upgrade():
#     # Rename the existing principal_id column (if it exists)
#     conn = op.get_bind()
#     inspector = sa.inspect(conn)
    
#     if 'principal_id' in [col['name'] for col in inspector.get_columns('assignments')]:
#         op.alter_column('assignments', 'principal_id', new_column_name='old_principal_id')

#     # Add a new principal_id column with the desired default value and foreign key constraint
#     op.add_column('assignments', sa.Column('principal_id', sa.Integer(), nullable=False, server_default='1'))
    
#     # Create the foreign key constraint
#     op.create_foreign_key('fk_assignments_principal_id', 'assignments', 'principals', ['principal_id'], ['id'])


# def downgrade():
#     # Drop the foreign key constraint
#     op.drop_constraint('fk_assignments_principal_id', 'assignments', type_='foreignkey')
    
#     # Drop the new principal_id column
#     op.drop_column('assignments', 'principal_id')
    
#     # Rename back the old principal_id column
#     op.alter_column('assignments', 'old_principal_id', new_column_name='principal_id')









# from alembic import op
# import sqlalchemy as sa
# from sqlalchemy import inspect


# # revision identifiers, used by Alembic.
# revision = 'f87c876281f9'
# down_revision = '52a401750a76'
# branch_labels = None
# depends_on = None


# def upgrade():
#     # Get the current connection
#     conn = op.get_bind()
    
#     # Check if the principal_id column already exists
#     inspector = inspect(conn)
#     columns = [col['name'] for col in inspector.get_columns('assignments')]
    
#     if 'principal_id' not in columns:
#         # Add the principal_id column only if it doesn't already exist
#         op.add_column('assignments', sa.Column('principal_id', sa.Integer(), nullable=False, server_default='1'))
    
#     # Alter the existing 'state' column to be non-nullable
#     op.alter_column('assignments', 'state',
#                     existing_type=sa.VARCHAR(length=9),
#                     nullable=False)

#     # Create the foreign key constraint
#     op.create_foreign_key('fk_assignments_principal_id', 'assignments', 'principals', ['principal_id'], ['id'])


# def downgrade():
#     # Drop the foreign key constraint if it exists
#     op.drop_constraint('fk_assignments_principal_id', 'assignments', type_='foreignkey')

#     # Check if principal_id exists and drop it if needed
#     conn = op.get_bind()
#     inspector = inspect(conn)
#     columns = [col['name'] for col in inspector.get_columns('assignments')]
    
#     if 'principal_id' in columns:
#         op.drop_column('assignments', 'principal_id')

#     # Alter the existing 'state' column to be nullable
#     op.alter_column('assignments', 'state',
#                     existing_type=sa.VARCHAR(length=9),
#                     nullable=True)



from alembic import op
import sqlalchemy as sa
from sqlalchemy import inspect


# revision identifiers, used by Alembic.
revision = 'f87c876281f9'
down_revision = '52a401750a76'
branch_labels = None
depends_on = None



def upgrade():
    # Set principal_id to 1 for all existing assignments
    op.execute("UPDATE assignments SET principal_id = 1")

def downgrade():
    # Optionally, you can define how to revert this change if needed
    # For example, if you want to set it back to NULL or some other value
    op.execute("UPDATE assignments SET principal_id = NULL")
